#!/usr/bin/env ruby

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'optparse'
require 'shellwords'
require 'oya'

Version = Oya::Version
Release = Oya::Release

params = ARGV
option = {:interval => 1}

OptionParser.new do |opt|
  opt.banner = "使用法: #{opt.program_name} [オプション] <ターゲット> <コマンド>"
  opt.on('-h', '--help', 'この使い方を表示して終了') { puts opt.help; exit }
  opt.on('-v', '--version', 'バージョン情報を表示して終了') { puts opt.ver; exit }
  opt.separator('')
  opt.on_tail <<~EOS
    使用例:
    #{opt.summary_indent}#{opt.program_name} ./script.rb 'ruby ./script.rb'
  EOS

  %w(~/.options/oya ./.oya).each do |path|
    expand_path = File.expand_path(path)
    if File.exist?(expand_path)
      params.unshift(*IO.readlines(expand_path).map {|line| Shellwords.split(line.chomp) }.flatten)
    end
  end
  opt.parse!(params) rescue (warn($!.message); exit(1))
end

target_path, command_str = params.tap do |array|
  unless array.size == 2
    warn "#{File.basename(__FILE__)}: 引数が足りません"
    exit(1)
  end
end

watch = Oya.watch(target_path) do
  interval = option[:interval]
  add_handler Oya::Handler::ShellNotifier.new('Target update!')
  add_handler Oya::Handler::DesktopNotifier.new('Target update!')
  add_handler Oya::Handler::Command.new(command_str)
end

watch_loop = Thread.fork do
  Signal.trap(:INT) { watch.stop; exit(1) }
  sleep
end

watch.start
watch_loop.join
